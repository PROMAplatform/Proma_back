name: Java CI with Gradle

on:
  pull_request:
    branches:
      - dev

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      - name: Create .env file
        run: |
          tee .env <<EOF
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF
      - name: Create application.yml
        run: |
          mkdir -p proma/src/main/resources
          tee proma/src/main/resources/application-datasource.yml <<EOF
          spring:
            datasource:
              driver-class-name: com.mysql.cj.jdbc.Driver
              url: ${{ secrets.DB_URL }}
              username: ${{ secrets.DB_USERNAME }}
              password: ${{ secrets.DB_PASSWORD }}
              hikari:
                pool-name: jpa-hikari-pool
                maximum-pool-size: 5
                jdbc-url: ${spring.datasource.url}
                username: ${spring.datasource.username}
                password: ${spring.datasource.password}
                driver-class-name: ${spring.datasource.driver-class-name}
                data-source-properties:
                  rewriteBatchedStatements: true
          EOF
      
          tee proma/src/main/resources/application.yml <<EOF
          server:
            port: 8080
          spring:
            profiles:
              active:
                - local
                - datasource
                - jpa
            security:
              oauth2:
                client:
                  registration:
                    google:
                      client-id: ${env.GOOGLE_CLIENT_ID}
                      client-secret: ${env.GOOGLE_CLIENT_SECRET}
                      redirect-uri: ${env.GOOGLE_REDIRECT_URI}
                      authorization-grant-type: authorization_code
                      scope:
                        - profile
                        - email
                        - openid
                    naver:
                      client-id: ${env.NAVER_CLIENT_ID}
                      client-secret: ${env.NAVER_CLIENT_SECRET}
                      redirect-uri: ${env.NAVER_REDIRECT_URI}
                      scope:
                        - name
                        - email
                        - profile_image
                      authorization-grant-type: authorization_code
                      client-name: PROMA
                      provider: naver
                    kakao:
                      client-id: ${env.KAKAO_CLIENT_ID}
                      client-secret: ${env.KAKAO_CLIENT_SECRET}
                      redirect-uri: ${env.KAKAO_REDIRECT_URI}
                      scope: profile_nickname, profile_image, account_email
                      authorization-grant-type: authorization_code
                      client-name: PROMA
                      provider: kakao
                  provider:
                    google:
                      authorization-uri: "https://accounts.google.com/o/oauth2/auth"
                      token-uri: "https://oauth2.googleapis.com/token"
                      user-info-uri: "https://www.googleapis.com/oauth2/v3/userinfo"
                    naver:
                      authorization-uri: "https://nid.naver.com/oauth2.0/authorize"
                      token-uri: "https://nid.naver.com/oauth2.0/token"
                      user-info-uri: "https://openapi.naver.com/v1/nid/me"
                      user_name_attribute: response
                    kakao:
                      authorization-uri: "https://kauth.kakao.com/oauth/authorize"
                      token-uri: "https://kauth.kakao.com/oauth/token"
                      user-info-uri: "https://kapi.kakao.com/v2/user/me"
          jwt:
            secret: ${env.JWT_SECRET}
            accessExpiredMs: 2592000000
            refreshExpiredMs: 12960000000
          EOF
      
          tee proma/src/main/resources/application-jpa.yml <<EOF
          spring:
            jpa:
              generate-ddl: true
              hibernate:
                ddl-auto: update
              show-sql: true
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.MySQL8Dialect
                  hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
                  current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
                  default_batch_fetch_size: 100
                  jdbc.batch_size: 20
                  order_inserts: true
                  order_updates: true
                  format_sql: true
          EOF
      # - name: Set YML
      #   run: |
      #     mkdir -p src/main/resources
      #     echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml
      #     echo "${{ secrets.APPLICATION_DATASOURCE_YML }}" > src/main/resources/application-datasource.yml
      #     echo "${{ secrets.APPLICATION_JPA_YML }}" > src/main/resources/application-jpa.yml
      #     find src

      - name: Grant Execute Permission For Gradlew & Build gradle
        run: |
          cd proma
          gradle wrapper
          chmod +x gradlew
          ./gradlew clean build -x test
          
      - name: Set JAR_FILE environment variable
        run: | 
          mkdir -p proma/build/libs
          JAR_FILE=$(ls proma/build/libs/*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Create Dockerfile
        run: |
          tee Dockerfile <<EOF
          FROM openjdk:17-jdk
          ARG JAR_FILE=proma/build/libs/proma-0.0.1-SNAPSHOT.jar
          COPY ${JAR_FILE} app.jar
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/proma .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/proma

      - name: Deploy to EC2
        run: |
         echo "${{ secrets.EC2_PRIVATE_KEY }}" > promaKey.pem
         chmod 600 promaKey.pem
         ssh -i promaKey.pem -o StrictHostKeyChecking=no -t ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
         CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
         if [ ! -z "$CONTAINER_ID" ]; then
           sudo docker stop $CONTAINER_ID
           sudo docker rm $CONTAINER_ID
         fi
         sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/proma
         sudo docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/proma
         #sudo docker system prune -f
         EOF
                
