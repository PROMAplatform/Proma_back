name: Java CI with Gradle

on:
  pull_request:
    branches:
      - dev

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Create .env file
        run: |
          tee .env <<EOF
          DB_URL=jdbc:mysql://localhost:3306/admin
          DB_USERNAME=admin
          DB_PASSWORD=root
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF

      - name: Create application.yml
        run: |
          mkdir -p proma/src/main/resources
          tee proma/src/main/resources/application.yml <<EOF
          spring:
            datasource:
              url: jdbc:mysql://localhost:3306/admin
              username: admin
              password: root
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              hibernate:
                ddl-auto: update
              show-sql: true
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.MySQL8Dialect
          EOF

      - name: Grant Execute Permission For Gradlew & Build gradle
        run: |
          cd proma
          gradle wrapper
          chmod +x gradlew
          ./gradlew clean build -x test
          
      - name: Set JAR_FILE environment variable
        run: | 
          mkdir -p proma/build/libs
          JAR_FILE=$(ls proma/build/libs/*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Create Dockerfile
        run: |
          tee Dockerfile <<EOF
          FROM openjdk:17-jdk
          ARG JAR_FILE=proma/build/libs/proma-0.0.1-SNAPSHOT.jar
          COPY ${JAR_FILE} app.jar
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAEM }}/proma .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/proma

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            if [ $(sudo docker ps -q -f name=proma) ]; then
              echo "Stopping and removing existing proma container"
              sudo docker stop proma
              sudo docker rm proma
            fi
            echo "Pulling new image"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/proma
            echo "Running new container"
            sudo docker run -d -p 8080:8080 --name proma ${{ secrets.DOCKERHUB_USERNAME }}/proma
            echo "Cleaning up unused Docker resources"
            sudo docker system prune -f
