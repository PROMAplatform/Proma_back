# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    - name: Create application.yml
      run: |
        mkdir -p proma/src/main/resources  # 필요한 디렉토리 생성
        tee proma/src/main/resources/application.yml <<EOF
        spring:
          datasource:
            driver-class-name: com.mysql.cj.jdbc.Driver
            url: ${{ secrets.DB_URL }}
            username: ${{ secrets.DB_USERNAME }}
            password: ${{ secrets.DB_PASSWORD }}
            hikari:
              pool-name: jpa-hikari-pool
              maximum-pool-size: 5
              data-source-properties:
                rewriteBatchedStatements: true
          jpa:
            generate-ddl: true
            hibernate:
              ddl-auto: update
              show-sql: true
              properties:
                hibernate:
                dialect: org.hibernate.dialect.MySQL8Dialect
                hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
                current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
                default_batch_fetch_size: ${chunkSize:100}
                jdbc.batch_size: 20
                order_inserts: true
                order_updates: true
                format_sql: true
        EOF

    - name: Grant Execute Permission For Gradlew & Build gradle
      run: |
        cd proma
        gradle wrapper 
        chmod +x gradlew
        ./gradlew clean build 
        
    # - name: Grant execute permission for gradlew
    #   run: chmod +x proma/gradlew

    # # Spring Boot 어플리케이션 Build
    # - name: Build with Gradle Wrapper
    #   working-directory: proma 
    #   run: ./gradlew build
    - name: Set JAR_FILE environment variable
      run: | 
        mkdir -p proma/build/libs  # build/libs 디렉토리 생성
        JAR_FILE=$(ls proma/build/libs/*.jar | head -n 1)
        echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
    - name: Create Dockerfile
      run: |
        tee Dockerfile <<EOF
        FROM openjdk:17-jdk

        # Jar 파일의 위치
        ARG JAR_FILE=build/libs/*.jar
        # app.jar는 경우에 따라 이름 변경
        COPY ${JAR_FILE} app.jar 
        # 생략 가능 - 해당 컨테이너는 8080 port 를 사용한다는 의미.
        EXPOSE 8080

        # docker run 시 실행할 필수 명령어
        ENTRYPOINT ["java", "-jar", "/app.jar"]
        EOF
    # Docker 이미지 Build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/proma .

    # DockerHub Login (push 하기 위해)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker hub 로 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/proma

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: ubuntu-latest
      
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          sudo docker stop $(sudo docker ps -aq)  # 기존 컨테이너 중지
          sudo docker rm $(sudo docker ps -aq)   # 기존 컨테이너 삭제
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/proma  # 새 이미지 pull
          sudo docker run -d -p 8080:8080 --name proma ${{ secrets.DOCKERHUB_USERNAME }}/proma  # 새 컨테이너 실행
          sudo docker system prune -f
