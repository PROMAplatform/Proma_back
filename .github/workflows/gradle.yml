name: Java CI with Gradle

on:
  pull_request:
    types:
      - closed
    branches:
      - dev

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          touch ./application-datasource.yml
          touch ./application-jpa.yml
          chmod 644 application.yml
          chmod 644 application-datasource.yml
          chmod 644 application-jpa.yml
          echo ${{secrets.APPLICATION_YML}} | base64 --decode > ./application.yml
          echo ${{secrets.APPLICATION_DATASOURCE_YML}} | base64 --decode > ./application-datasource.yml
          echo ${{secrets.APPLICATION_JPA_YML}} | base64 --decode > ./application-jpa.yml

      - name: Grant Execute Permission For Gradlew & Build gradle
        run: |
          cd proma
          gradle wrapper
          chmod +x gradlew
          ./gradlew clean build -x test
          
      - name: Set JAR_FILE environment variable
        run: | 
          mkdir -p proma/build/libs
          JAR_FILE=$(ls proma/build/libs/*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Create Dockerfile
        run: |
          tee Dockerfile <<EOF
          FROM openjdk:17-jdk
          ARG JAR_FILE=proma/build/libs/proma-0.0.1-SNAPSHOT.jar
          COPY src/main/resources/application.yml application.yml
          COPY src/main/resources/application-datasource.yml application-datasource.yml
          COPY src/main/resources/application-jpa.yml application-jpa.yml
          ENV SPRING_CONFIG_LOCATION=application.yml,application-datasource.yml,application-jpa.yml
          COPY ${JAR_FILE} app.jar
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      - name: docker image build
        run: docker build --build-arg DEPENDENCY=build/dependency -t ${{ secrets.DOCKERHUB_USERNAME }}/proma --platform linux/amd64 .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/proma

      - name: Deploy to EC2
        run: |
         echo "${{ secrets.EC2_PRIVATE_KEY }}" > promaKey.pem
         chmod 600 promaKey.pem
         ssh -i promaKey.pem -o StrictHostKeyChecking=no -t ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
         CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
         if [ ! -z "$CONTAINER_ID" ]; then
           sudo docker stop $CONTAINER_ID
           sudo docker rm $CONTAINER_ID
         fi
         sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/proma
         sudo docker run -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/proma
         #sudo docker system prune -f
         EOF
                
