name: Java CI with Gradle

on:
  pull_request:
    branches:
      - dev

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Create .env file
        run: |
          tee .env <<EOF
          DB_URL=jdbc:mysql://localhost:3306/admin
          DB_USERNAME=admin
          DB_PASSWORD=root
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
          NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF

      - name: Create application.yml
        run: |
          mkdir -p proma/src/main/resources
          tee proma/src/main/resources/application.yml <<EOF
          spring:
            datasource:
              url: jdbc:mysql://localhost:3306/admin
              username: admin
              password: root
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              hibernate:
                ddl-auto: update
              show-sql: true
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.MySQL8Dialect
          EOF

      - name: Grant Execute Permission For Gradlew & Build gradle
        run: |
          cd proma
          gradle wrapper
          chmod +x gradlew
          ./gradlew clean build -x test
          
      - name: Set JAR_FILE environment variable
        run: | 
          mkdir -p proma/build/libs
          JAR_FILE=$(ls proma/build/libs/*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Create Dockerfile
        run: |
          tee Dockerfile <<EOF
          FROM openjdk:17-jdk
          ARG JAR_FILE=proma/build/libs/proma-0.0.1-SNAPSHOT.jar
          COPY ${JAR_FILE} app.jar
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/proma .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/proma
        
      # - name: Set up SSH key
      #   run: |
      #     echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > promaKey.pem
      #     chmod 600 promaKey.pem
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > promaKey.pem
          chmod 600 promaKey.pem
                
      - name: pull private repository
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script_stop: true
          script: |
            sudo docker stop proma
            sudo docker rm proma
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/proma
            sudo docker run -d -p 8080:8080 --name proma ${{ secrets.DOCKERHUB_USERNAME }}/proma
            sudo docker system prune -f
            # pgrep java | xargs kill -9 || true
            # nohup java -jar /home/${{ secrets.EC2_USERNAME }}/proma.jar > app.log 2>&1 &

      # - name: Deploy Docker container to EC2
      #   run: |
      #     ssh -tt -i "${{ secrets.EC2_SSH_KEY }}" -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
      #       # Stop and remove the existing Docker container if it exists
      #       if sudo docker ps -q -f name=proma > /dev/null; then
      #         echo "Stopping and removing existing proma container"
      #         sudo docker stop proma
      #         sudo docker rm proma
      #       fi

      #       # Pull the latest image
      #       echo "Pulling new image"
      #       sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/proma

      #       # Run a new container from the pulled image
      #       echo "Running new container"
      #       sudo docker run -d -p 8080:8080 --name proma ${{ secrets.DOCKERHUB_USERNAME }}/proma

      #       # Clean up unused Docker resources
      #       echo "Cleaning up unused Docker resources"
      #       sudo docker system prune -f

      #       # Stop the existing Java application if running
      #       pgrep java | xargs kill -9 || true

      #       # Run the new Java application
      #       echo "Running new Java application"
      #       nohup java -jar /home/${{ secrets.EC2_USERNAME }}/proma.jar > app.log 2>&1 &
      #     EOF
